/*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Config to store module specific params.
     - publishDir
     - ext arguments
     - prefixes
     ( execution params are in nf_*.config )
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {

    withName: "FASTP" {
        publishDir = [
            [
                path: "${params.outdir}/qc/fastp/",
                mode: params.publish_dir_mode,
                enabled: params.publish_all,
                failOnError: true,
                pattern: "*.fastp.html",
                // saveAs: { filename -> "${filename.contains('.') ? filename.split('.')[0] : filename}/${filename}" }
            ],
            [
                path: "${params.outdir}/qc/fastp/",
                mode: params.publish_dir_mode,
                enabled: params.publish_all,
                failOnError: true,
                pattern: "*.fastp.log",
                // saveAs: { filename -> "${filename.contains('.') ? filename.split('.')[0] : filename}/${filename}" }
            ],
            [
                path: "${params.outdir}/qc/fastp/",
                mode: params.publish_dir_mode,
                enabled: params.publish_all,
                failOnError: true,
                pattern: "*.fastp.json",
                // saveAs: { filename -> "${filename.contains('.') ? filename.split('.')[0] : filename}/${filename}" }
            ]
        ]
    }

    // TODO: bug not working currently
    withName: CONCOCT_EXTRACTFASTABINS {
        publishDir = [
            [
                path: "${params.outdir}/binning/concoct",
                mode: params.publish_dir_mode,
                enabled: params.publish_all,
                failOnError: true,
                pattern: "*_concoct_bins/*.fa",
            ],
        ]
        errorStrategy = { task.exitStatus != 0 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    withName: FEATURED_ALIGNMENT {
        ext.alignment_args = [
            "-q", "20",
            "-Sb",
            "-F", "4"
        ].join(' ')

        ext.concoct_cut_up_fasta_args = [
            "-c 10000",
            "--merge_last",
            "-o 0"
        ].join(' ')

        ext.concoct_coverage_table_args = ''

        ext.jgi_summarize_bam_contig_depths_args = ''

        ext.concoct_prefix = { "concoct-${meta.id}" }

        publishDir = [
            [
                path: { "${params.outdir}/binning/concoct/coverage" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv',
                enabled: params.publish_all
            ],
            [
                path: { "${params.outdir}/binning/metabat2/depths" },
                mode: params.publish_dir_mode,
                pattern: '*.txt.gz',
                enabled: params.publish_all
            ]
        ]
    }

    withName: ALIGNMENT_LINKTABLE {
        ext.alignment_args = [
            "-q", "20",
            "-Sb",
            "-F", "4"
        ].join(' ')
    }

    withName: ALIGNMENT_DECONTAMINATION {
        ext.decontamination_args = [
            "-f", "4",
            "-F", "256",
            "-uS"
        ].join(' ')
    }

    withName: BAT_TAXONOMY_WRITER {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_euks}/${params.subdir_taxonomy}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "all_bin2classification.txt"
            ],
            [
                path: "${params.outdir}/${params.subdir_euks}/${params.subdir_taxonomy}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "human_readable.taxonomy.csv",
                enabled: params.publish_all
            ]
        ]
    }

    withName: BINETTE {
        publishDir = [
            path: "${params.outdir}/${params.subdir_proks}/refinement/binette",
            mode: params.publish_dir_mode,
            pattern: "*_final_bins_quality_reports.tsv",
            enabled: params.publish_all
        ]
    }

    withName: BUSCO_EUKCC_QC {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_euks}/${params.subdir_stats}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "eukcc_final_qc.csv"
            ],
            [
                path: "${params.outdir}/${params.subdir_euks}/${params.subdir_stats}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "combined_busco_eukcc.qc.csv",
                enabled: params.publish_all
            ],
        ]
    }

    withName: CHECKM2 {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_stats}",
                mode: params.publish_dir_mode,
                pattern: "*filtered_genomes.tsv",
                enabled: params.publish_all
            ],
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_stats}",
                mode: params.publish_dir_mode,
                pattern: "*all_stats.csv",
                enabled: params.publish_all
            ]
        ]
    }

    // TODO publish stats for prok MAGs
    // publishDir = [
    //         [
    //             path: "${params.outdir}/${params.subdir_proks}/${params.subdir_stats}",
    //             mode: params.publish_dir_mode,
    //         ]
    //     ]


    withName: CONCOCT_CONCOCT {
        ext.args = [
            params.min_contig_size <= 1000 ? "-l 1000" : "-l ${params.min_contig_size}",
        ].join(' ').trim()
    }

    withName: COVERAGE_RECYCLER {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_coverage}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "coverage/*/*_MAGcoverage.txt"
                // TODO: bug somewhere not working yet
                // saveAs: { filename -> {
                //             if (filename.split('/').size() <= 3) {
                //                 return null;
                //             } else {
                //                 def file = filename.split('/')[3].split('.')[0];
                //                 return "${file}";
                //                 }
                //             }
                //         }
            ],
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_coverage}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "coverage/aggregated_contigs2bins.txt",
                enabled: params.publish_all
                // TODO: bug somewhere not working yet
                // saveAs: {
                //     filename ->
                //         {
                //             if (filename.split('/').size() <= 2) {
                //                 return null;
                //             } else {
                //                 def subfolder = filename.split('/')[1];
                //                 def file = filename.split('/')[2];
                //                 return "${file}";
                //             }
                //         }
                //     }
            ]
        ]
    }

    withName: COVERAGE_RECYCLER_EUK {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_euks}/${params.subdir_coverage}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "coverage/*/*_MAGcoverage.txt"
                // TODO: bug somewhere not working yet
                // saveAs: { filename -> {
                //             if (filename.split('/').size() <= 3) {
                //                 return null;
                //             } else {
                //                 def file = filename.split('/')[3].split('.')[0];
                //                 return "${file}.txt";
                //                 }
                //             }
                //         }
            ],
            [
                path: "${params.outdir}/${params.subdir_euks}/${params.subdir_coverage}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "coverage/aggregated_contigs2bins.txt",
                enabled: params.publish_all
                // TODO: bug somewhere not working yet
                // saveAs: { filename -> {
                //             if (filename.split('/').size() <= 2) {
                //                 return null;
                //             } else {
                //                 def subfolder = filename.split('/')[1];
                //                 def file = filename.split('/')[2];
                //                 return "${file}";
                //                 }
                //             }
                //         }
            ]
        ]
    }

    withName: CREATE_MANIFESTS_FOR_UPLOAD {
        publishDir = [
            // Manifest files
            [
                path: "${params.outdir}/upload/",
                mode: params.publish_dir_mode,
                pattern: "results/MAG_upload/manifests*/*.manifest",
                failOnError: true,
                saveAs: { filename ->
                    // Extract just the manifest filename and its immediate parent directory
                    def parts = filename.split('/')
                    def manifestDir = parts[-2]  // e.g., "manifests1", "manifests2"
                    def manifestFile = parts[-1]  // e.g., "file.manifest"
                    return "${manifestDir}/${manifestFile}"
                }
            ],
            // Upload files (XML, JSON, TSV)
            [
                path: "${params.outdir}/upload/",
                mode: params.publish_dir_mode,
                pattern: "results/MAG_upload/*.{xml,json,tsv}",
                failOnError: true,
                saveAs: { filename -> new File(filename).name }
            ]
        ]
    }

    withName: '.*:EUK_MAGS_GENERATION:DREP_DEREPLICATE_.*' {
        // TODO check if we really need to publish run level drep outputs
        publishDir = [
                [
                    path: { "${params.outdir}/${params.subdir_euks}/drep/${meta.id}" },
                    mode: params.publish_dir_mode,
                    failOnError: true,
                    pattern: "dereplicated_genomes.txt",
                    enabled: params.publish_all
                ]
            ]
    }

    withName: '.*:EUK_MAGS_GENERATION:DREP_DEREPLICATE_RUNS' {
        ext.args = "-pa 0.80 -sa 0.99 -nc 0.40 -cm larger -comp 49 -con 21"
    }

    withName: '.*:EUK_MAGS_GENERATION:DREP_DEREPLICATE_MAGS' {
        ext.args = "-pa 0.80 -sa 0.95 -nc 0.40 -cm larger -comp 49 -con 21"
    }

    withName: '.*:PROK_MAGS_GENERATION:DREP_DEREPLICATE' {
        ext.args = '-pa 0.9 -sa 0.95 -nc 0.6 -cm larger -comp 50 -con 5'
        publishDir = [
                [
                    path: { "${params.outdir}/${params.subdir_proks}/drep/${meta.id}" },
                    mode: params.publish_dir_mode,
                    failOnError: true,
                    pattern: "dereplicated_genomes.txt",
                    enabled: params.publish_all
                ]
            ]
    }

    withName: '.*:EUK_MAGS_GENERATION:COMPRESS_MAGS' {
        publishDir = [
            path: { "${params.outdir}/${params.subdir_euks}/${params.subdir_mags}" },
            mode: params.publish_dir_mode,
            failOnError: true,
            pattern: '*.gz',
        ]
    }

    withName: '.*:EUK_MAGS_GENERATION:COMPRESS_BINS' {
        publishDir = [
            path: { "${params.outdir}/${params.subdir_bins}/${params.subdir_euks}" },
            mode: params.publish_dir_mode,
            failOnError: true,
            pattern: '*.gz',
        ]
    }

    withName: '.*:PROK_MAGS_GENERATION:COMPRESS_MAGS' {
        publishDir = [
            path: { "${params.outdir}/${params.subdir_proks}/${params.subdir_mags}" },
            mode: params.publish_dir_mode,
            failOnError: true,
            pattern: '*.gz',
        ]
    }

    withName: '.*:PROK_MAGS_GENERATION:COMPRESS_BINS' {
        publishDir = [
            path: { "${params.outdir}/${params.subdir_bins}/${params.subdir_proks}" },
            mode: params.publish_dir_mode,
            failOnError: true,
            pattern: '*.gz',
        ]
    }

    withName: DETECT_RRNA {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_rna}",
                saveAs: {
                    filename -> {
                        if ( !filename.endsWith(".fasta") ) {
                            return null
                        }
                        def output_file = new File(filename);
                        def genome_id = fasta.baseName;
                        if ( output_file.name.contains("_rRNAs") ) {
                            return "${genome_id}/${genome_id}_fasta/${output_file.name}";
                        }
                        return null;
                    }
                },
                mode: params.publish_dir_mode,
                failOnError: true,
            ],
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_rna}",
                saveAs: {
                    filename -> {
                        if ( !filename.endsWith(".out") ) {
                            return null;
                        }
                        def output_file = new File(filename);
                        def genome_id = fasta.baseName;
                        if ( output_file.name.contains("_rRNAs") || output_file.name.contains("_tRNA_20aa") ) {
                            return "${genome_id}/${genome_id}_out/${output_file.name}";
                        }
                        return null;
                    }
                },
                mode: params.publish_dir_mode,
                failOnError: true,
            ]
        ]
    }

    withName: EUKCC {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_euks}/refinement/eukcc",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.merged_bins.csv",
                enabled: params.publish_all
            ],
            [
                path: "${params.outdir}/${params.subdir_euks}/refinement/eukcc",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.eukcc.csv",
                enabled: params.publish_all
            ]
        ]
    }

    withName: GENERATE_INPUT_SAMPLESHEET {
        publishDir = [
            [
                path: "${params.outdir}/input/",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "outdir/*.*sv"
            ]
        ]
    }

    withName: LINKTABLE {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_euks}/refinement/binlinks",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.links.csv",
                enabled: params.publish_all
            ]
        ]
    }

    withName: GUNC {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_stats}",
                mode: params.publish_dir_mode,
                failOnError: false,
                pattern: "gunc_contaminated.txt",
                enabled: params.publish_all
            ]
        ]
    }


    withName: GTDBTK {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_taxonomy}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "gtdbtk_results.tar.gz",
                enabled: params.publish_all
            ]
        ]
    }


    withName: GTDBTK_TO_NCBI_TAXONOMY {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_taxonomy}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "ncbi_taxonomy.txt"
            ]
        ]
    }

    withName: '.*:PROK_MAGS_GENERATION:PROPAGATE_TAXONOMY_TO_BINS' {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_proks}/${params.subdir_taxonomy}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "ncbi_taxonomy_propagated.txt",
                enabled: params.publish_all
            ]
        ]
    }

    withName: '.*:EUK_MAGS_GENERATION:PROPAGATE_TAXONOMY_TO_BINS' {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_euks}/${params.subdir_taxonomy}",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "ncbi_taxonomy_propagated.txt",
                enabled: params.publish_all
            ]
        ]
    }

    withName: MAXBIN2 {

        publishDir = [
            [
                path: { "${params.outdir}/binning/maxbin2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.tooshort.gz',
                enabled: params.publish_all
            ],
            [
                path: { "${params.outdir}/binning/maxbin2" },
                mode: params.publish_dir_mode,
                pattern: 'maxbin_output/*.fa',
                enabled: params.publish_all
            ],
        ]
        ext.prefix = { "maxbin2-${meta.id}" }
        // if no gene found, will crash so allow ignore so rest of pipeline
        // completes but without MaxBin2 results
        ext.args = [
            params.min_contig_size <= 1000 ? "-min_contig_length 1000" : "-min_contig_length ${params.min_contig_size}",
        ].join(' ').trim()
    }

    withName: METABAT2_METABAT2 {

        publishDir = [
            [
                path: { "${params.outdir}/binning/metabat2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*tooShort*',
                enabled: params.publish_all
            ],
            [
                path: { "${params.outdir}/binning/metabat2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*lowDepth*',
                enabled: params.publish_all
            ],
            [
                path: { "${params.outdir}/binning/metabat2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*unbinned*',
                enabled: params.publish_all
            ],
            [
                path: { "${params.outdir}/binning/metabat2" },
                mode: params.publish_dir_mode,
                pattern: '*_metabat_bins/*.fa',
                enabled: params.publish_all
            ]
        ]
        ext.prefix = { "metabat2-${meta.id}" }
        ext.args = [
            params.min_contig_size < 1500 ? "-m 1500" : "-m ${params.min_contig_size}",
            "--unbinned",
            "--seed ${params.metabat2_rng_seed}"
        ].join(' ').trim()
    }

    withName: MODIFY_QUALITY_FILE {
        publishDir = [
            [
                path: "${params.outdir}/${params.subdir_euks}/qs50",
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "aggregated_euk_quality.csv",
                enabled: params.publish_all
            ],
        ]
    }

    withName: 'MULTIQC' {

        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: PREPARE_TSV_FOR_UPLOADER {
        publishDir = [
            path: { "${params.outdir}/upload" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: FINALIZE_LOGGING {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: WEBIN_CLI_UPLOAD {
        errorStrategy = { 
            task.exitStatus in ((130..145) + 104 + 1) ? 'retry' : 'finish' 
        }
        publishDir = [
            [
                path: "${params.outdir}/upload/webin_cli_reports",
                mode: params.publish_dir_mode,
                pattern: "*report",
                failOnError: true
            ]
        ]
    }
}
