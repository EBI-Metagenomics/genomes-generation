{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/./master/nextflow_schema.json",
  "title": ". pipeline parameters",
  "description": "",
  "type": "object",
  "definitions": {
    "input_output_options": {
      "title": "Input/output options",
      "type": "object",
      "fa_icon": "fas fa-terminal",
      "description": "Define where the pipeline should find input data and save output data.",
      "required": ["ena_assembly_study_accession", "samplesheet", "outdir"],
      "properties": {
        "ena_assembly_study_accession": {
          "type": "string",
          "description": "Assembly study accession - used to upload MAGs",
          "fa_icon": "fas fa-ad"
        },
        "metagenome": {
          "type": "string",
          "description": "Metagenome from ENA list for upload",
          "fa_icon": "fas fa-ad"
        },
        "biomes": {
          "type": "string",
          "description": "Biome in format: environment_biome,environment_feature,environment_material",
          "fa_icon": "fas fa-ad",
          "pattern": "^[a-z\\s]+,[a-z\\s]+,[a-z\\s-]+$"
        },
        "samplesheet": {
          "type": "string",
          "format": "file-path",
          "exists": true,
          "mimetype": "text/csv",
          "pattern": "^\\S+\\.csv$",
          "schema": "assets/schema_input.json",
          "description": "Path to comma-separated file containing information about the assemblies, raw reads with the prefix to be used.",
          "help_text": "You will need to create a design file with information about the assemblies, raw reads running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 5 columns, and a header row.",
          "fa_icon": "fas fa-file-csv"
        },
        "bins_provided": {
          "type": "boolean",
          "description": "Pre-generated bins provided in the sample file"
        },
        "outdir": {
          "type": "string",
          "format": "directory-path",
          "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
          "fa_icon": "fas fa-folder-open"
        }
      }
    },
    "skipping_steps_options": {
      "title": "Skip steps of pipeline",
      "type": "object",
      "description": "Skipping not necessary steps",
      "default": "",
      "properties": {
        "skip_preprocessing_input": {
          "type": "boolean",
          "description": "Skip input data pre-processing step that renames ERZ-fasta files to ERR-run accessions. Do not skip that step if you process data from ENA!",
          "default": false
        },
        "skip_decontamination": {
          "type": "boolean",
          "default": false,
          "description": "Skip decontamination on reference genome"
        }
      }
    },
    "quality_control": {
      "title": "Quality Control",
      "type": "object",
      "description": "QC related parameters",
      "default": "",
      "properties": {
        "merge_pairs": {
          "type": "boolean",
          "description": "Merge the paired reads after QC",
          "default": true
        },
        "min_contig_size": {
          "type": "integer",
          "default": 1500,
          "description": "Minimum contig size in bp. Contigs smaller that this will be discarded"
        }
      }
    },
    "mags_upload": {
      "title": "MAGs uploader arguments",
      "type": "object",
      "description": "genome_uploader supported options for automatic mags upload",
      "default": "",
      "properties": {
        "centre_name": {
          "type": "string",
          "default": "",
          "description": "name of the centre generating and uploading genomes"
        },
        "upload_tpa": {
          "type": "boolean",
          "default": true,
          "description": "if uploading TPA (Third PArty) generated genomes"
        },
        "upload_force": {
          "type": "boolean",
          "default": false,
          "description": "forces reset of submission xml and ENA backup"
        },
        "upload_mags": {
          "type": "boolean",
          "default": true,
          "description": "Upload MAGs (Metagenome-Assembled Genomes)"
        },
        "upload_bins": {
          "type": "boolean",
          "default": false,
          "description": "Upload bins"
        }
      },
      "oneOf": [
        {
          "properties": {
            "webin_account": { "type": "string" },
            "webin_password": { "type": "string" },
            "centre_name": { "type": "string" },
            "upload_tpa": { "type": "boolean" },
            "upload_mags": { "const": true },
            "upload_bins": { "const": false }
          }
        },
        {
          "properties": {
            "upload_mags": { "const": false },
            "upload_bins": { "const": false }
          }
        }
      ]
    },
    "prokaryotes_mags_generation": {
      "title": "Prokaryotes MAGs generation",
      "type": "object",
      "description": "Options for Prokaryotes MAGs generation subworkflow",
      "default": "",
      "properties": {
        "skip_prok": {
          "type": "boolean",
          "description": "Skip the prokaryotes MAGs generation subworkflow"
        },
        "metabat2_rng_seed": {
          "type": "integer",
          "default": 1,
          "description": "RNG seed for MetaBAT2",
          "help_text": "MetaBAT2 is run by default with a fixed seed within this pipeline, thus producing reproducible results. You can set it also to any other positive integer to ensure reproducibility. Set the parameter to 0 to use a random seed."
        },
        "cat_db_folder": {
          "type": "string",
          "description": "CAT diamond reference DB folder path",
          "format": "directory-path"
        },
        "cat_diamond_db": {
          "type": "string",
          "description": "CAT diamond reference DB file",
          "format": "file-path"
        },
        "cat_taxonomy_db": {
          "type": "string",
          "description": "CAT taxonomy reference DB folder path",
          "format": "directory-path"
        },
        "gunc_db": {
          "type": "string",
          "description": "GUNC reference db",
          "format": "file-path",
          "pattern": "^\\S+\\.dmnd$"
        },
        "checkm2_db": {
          "type": "string",
          "description": "CheckM 2 referece DB file path",
          "format": "file-path",
          "pattern": "^\\S+\\.dmnd$"
        },
        "rfam_rrna_models": {
          "type": "string",
          "description": "RFam RNA models",
          "format": "directory-path"
        },
        "gtdbtk_db": {
          "type": "string",
          "description": "GTDBTk reference database",
          "format": "directory-path"
        }
      }
    },
    "eukaryotes_mags_generation": {
      "title": "Eukaryotes MAGs generation",
      "type": "object",
      "description": "Options for Eukaryotes MAGs generation subworkflow",
      "default": "",
      "properties": {
        "skip_euk": {
          "type": "boolean"
        },
        "eukcc_db": {
          "type": "string",
          "description": "EukCC reference database. Setup instructions: https://eukcc.readthedocs.io/en/latest/quickstart.html#database-setup",
          "format": "directory-path",
          "help_text": "EukCC reference database. \n"
        },
        "busco_db": {
          "type": "string",
          "description": "Filepath for the BUSCO dataset downloads",
          "format": "directory-path"
        }
      }
    },
    "reference_genome": {
      "title": "Reference genome",
      "type": "object",
      "description": "Reference genome related files and options required for the decontamination subworkflow.",
      "default": "",
      "fa_icon": "fas fa-file",
      "properties": {
        "ref_genome": {
          "type": "string",
          "description": "Reference genome .fasta file",
          "format": "path"
        }
      }
    },
    "generic_options": {
      "title": "Generic options",
      "type": "object",
      "fa_icon": "fas fa-file-import",
      "description": "Less common options for the pipeline, typically set in a config file.",
      "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
      "properties": {
        "help": {
          "type": "boolean",
          "description": "Display help text.",
          "fa_icon": "fas fa-question-circle",
          "hidden": true
        },
        "version": {
          "type": "boolean",
          "description": "Display version and exit.",
          "fa_icon": "fas fa-question-circle",
          "hidden": true
        },
        "monochrome_logs": {
          "type": "boolean",
          "description": "Display monochrome logs.",
          "fa_icon": "fas fa-question-circle",
          "hidden": true
        },
        "publish_dir_mode": {
          "type": "string",
          "default": "copy",
          "description": "Method used to save pipeline results to output directory.",
          "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
          "fa_icon": "fas fa-copy",
          "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
          "hidden": true
        },
        "validate_params": {
          "type": "boolean",
          "description": "Boolean whether to validate parameters against the schema at runtime",
          "default": true,
          "fa_icon": "fas fa-check-square",
          "hidden": true
        },
        "validationShowHiddenParams": {
          "type": "boolean",
          "fa_icon": "far fa-eye-slash",
          "description": "Show all params when using `--help`",
          "hidden": true,
          "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
        },
        "validationFailUnrecognisedParams": {
          "type": "boolean",
          "fa_icon": "far fa-check-circle",
          "description": "Validation of parameters fails when an unrecognised parameter is found.",
          "hidden": true,
          "help_text": "By default, when an unrecognised parameter is found, it returns a warinig."
        },
        "validationLenientMode": {
          "type": "boolean",
          "fa_icon": "far fa-check-circle",
          "description": "Validation of parameters in lenient more.",
          "hidden": true,
          "help_text": "Allows string values that are parseable as numbers or booleans. For further information see [JSONSchema docs](https://github.com/everit-org/json-schema#lenient-mode)."
        },
        "multiqc_title": {
          "type": "string",
          "description": "Custom title for the MultiQC report.",
          "fa_icon": "fas fa-cog"
        },
        "multiqc_config": {
          "type": "string",
          "description": "Custom config file to supply to MultiQC.",
          "fa_icon": "fas fa-cog",
          "hidden": true
        },
        "multiqc_logo": {
          "type": "string",
          "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
          "fa_icon": "fas fa-image",
          "hidden": true
        },
        "multiqc_methods_description": {
          "type": "string",
          "description": "Custom MultiQC yaml file containing HTML including a methods description.",
          "fa_icon": "fas fa-cog"
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/input_output_options"
    },
    {
      "$ref": "#/definitions/skipping_steps_options"
    },
    {
      "$ref": "#/definitions/quality_control"
    },
    {
      "$ref": "#/definitions/prokaryotes_mags_generation"
    },
    {
      "$ref": "#/definitions/eukaryotes_mags_generation"
    },
    {
      "$ref": "#/definitions/reference_genome"
    },
    {
      "$ref": "#/definitions/generic_options"
    }
  ]
}
